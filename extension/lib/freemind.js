function escapeXml(text) {
  return text
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&apos;");
}

function normalizeChildren(children) {
  if (!Array.isArray(children)) {
    return [];
  }
  return children.filter((child) => child && typeof child.title === "string");
}

function buildNodeAttributes(node) {
  const attributes = [];
  if (node && typeof node.id === "string" && node.id.trim().length) {
    attributes.push(`ID="${escapeXml(node.id.trim())}"`);
  }

  const title =
    node && typeof node.title === "string" && node.title.trim().length
      ? node.title.trim()
      : "Nodo";
  attributes.push(`TEXT="${escapeXml(title)}"`);
  return attributes.join(" ");
}

function nodeToFreemindLines(node, level = 1) {
  const indent = "  ".repeat(level);
  const children = normalizeChildren(node.children);
  const lines = [`${indent}<node ${buildNodeAttributes(node)}>`];

  if (children.length) {
    children.forEach((child) => {
      lines.push(...nodeToFreemindLines(child, level + 1));
    });
  }

  lines.push(`${indent}</node>`);
  return lines;
}

export function buildFreemindDocument(nodes) {
  const safeNodes = normalizeChildren(nodes);

  const lines = [
    '<?xml version="1.0" encoding="UTF-8"?>',
    '<map version="1.0.1">',
    '<!-- Generated by NotebookLM Corrected Mindmap Extractor v6.2 with Complete Parent-Child Logic -->',
  ];

  if (safeNodes.length === 0) {
    lines.push('  <node ID="generated_root" TEXT="Mindmap">');
    lines.push('  </node>');
  } else if (safeNodes.length === 1) {
    lines.push(...nodeToFreemindLines(safeNodes[0], 1));
  } else {
    lines.push('  <node ID="generated_root" TEXT="Mindmap">');
    safeNodes.forEach((node) => {
      lines.push(...nodeToFreemindLines(node, 2));
    });
    lines.push('  </node>');
  }

  lines.push('</map>');
  return lines.join("\r\n") + "\r\n";
}

export function slugify(input) {
  return (input || "")
    .toString()
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/^-+|-+$/g, "")
    .slice(0, 80) || "mindmap";
}
